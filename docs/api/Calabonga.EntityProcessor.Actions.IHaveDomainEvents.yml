### YamlMime:ManagedReference
items:
- uid: Calabonga.EntityProcessor.Actions.IHaveDomainEvents
  commentId: T:Calabonga.EntityProcessor.Actions.IHaveDomainEvents
  id: IHaveDomainEvents
  parent: Calabonga.EntityProcessor.Actions
  children:
  - Calabonga.EntityProcessor.Actions.IHaveDomainEvents.DomainEvents
  langs:
  - csharp
  - vb
  name: IHaveDomainEvents
  nameWithType: IHaveDomainEvents
  fullName: Calabonga.EntityProcessor.Actions.IHaveDomainEvents
  type: Interface
  source:
    remote:
      path: src/Calabonga.EntityProcessor/Actions/IHaveDomainEvents.cs
      branch: main
      repo: git@github.com:Calabonga/Calabonga.EntityProcessor.git
    id: IHaveDomainEvents
    path: ../../src/Calabonga.EntityProcessor/Actions/IHaveDomainEvents.cs
    startLine: 4
  assemblies:
  - Calabonga.EntityProcessor
  namespace: Calabonga.EntityProcessor.Actions
  syntax:
    content: public interface IHaveDomainEvents
    content.vb: Public Interface IHaveDomainEvents
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Calabonga.EntityProcessor.Actions.IHaveDomainEvents.DomainEvents
  commentId: P:Calabonga.EntityProcessor.Actions.IHaveDomainEvents.DomainEvents
  id: DomainEvents
  parent: Calabonga.EntityProcessor.Actions.IHaveDomainEvents
  langs:
  - csharp
  - vb
  name: DomainEvents
  nameWithType: IHaveDomainEvents.DomainEvents
  fullName: Calabonga.EntityProcessor.Actions.IHaveDomainEvents.DomainEvents
  type: Property
  source:
    remote:
      path: src/Calabonga.EntityProcessor/Actions/IHaveDomainEvents.cs
      branch: main
      repo: git@github.com:Calabonga/Calabonga.EntityProcessor.git
    id: DomainEvents
    path: ../../src/Calabonga.EntityProcessor/Actions/IHaveDomainEvents.cs
    startLine: 6
  assemblies:
  - Calabonga.EntityProcessor
  namespace: Calabonga.EntityProcessor.Actions
  syntax:
    content: IEnumerable<IDomainEvent> DomainEvents { get; }
    parameters: []
    return:
      type: IEnumerable{Calabonga.EntityProcessor.Events.IDomainEvent}
    content.vb: ReadOnly Property DomainEvents As IEnumerable(Of IDomainEvent)
  overload: Calabonga.EntityProcessor.Actions.IHaveDomainEvents.DomainEvents*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
references:
- uid: Calabonga.EntityProcessor.Actions
  commentId: N:Calabonga.EntityProcessor.Actions
  name: Calabonga.EntityProcessor.Actions
  nameWithType: Calabonga.EntityProcessor.Actions
  fullName: Calabonga.EntityProcessor.Actions
- uid: Calabonga.EntityProcessor.Actions.IHaveDomainEvents.DomainEvents*
  commentId: Overload:Calabonga.EntityProcessor.Actions.IHaveDomainEvents.DomainEvents
  name: DomainEvents
  nameWithType: IHaveDomainEvents.DomainEvents
  fullName: Calabonga.EntityProcessor.Actions.IHaveDomainEvents.DomainEvents
- uid: IEnumerable{Calabonga.EntityProcessor.Events.IDomainEvent}
  commentId: '!:IEnumerable{Calabonga.EntityProcessor.Events.IDomainEvent}'
  definition: IEnumerable`1
  name: IEnumerable<IDomainEvent>
  nameWithType: IEnumerable<IDomainEvent>
  fullName: IEnumerable<Calabonga.EntityProcessor.Events.IDomainEvent>
  nameWithType.vb: IEnumerable(Of IDomainEvent)
  fullName.vb: IEnumerable(Of Calabonga.EntityProcessor.Events.IDomainEvent)
  name.vb: IEnumerable(Of IDomainEvent)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Calabonga.EntityProcessor.Events.IDomainEvent
    name: IDomainEvent
    nameWithType: IDomainEvent
    fullName: Calabonga.EntityProcessor.Events.IDomainEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Calabonga.EntityProcessor.Events.IDomainEvent
    name: IDomainEvent
    nameWithType: IDomainEvent
    fullName: Calabonga.EntityProcessor.Events.IDomainEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullName.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
